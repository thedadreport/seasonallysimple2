// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// NextAuth.js required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For email/password authentication
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  subscription  Subscription?
  usageStats    UsageStats[]
  recipes       Recipe[]
  mealPlans     MealPlan[]
  preferences   UserPreferences?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Our app-specific models
model Subscription {
  id               String   @id @default(cuid())
  userId           String   @unique
  tier             String   // 'free', 'pro', 'family'
  status           String   // 'active', 'cancelled', 'past_due', 'trialing'
  stripeCustomerId String?
  stripeSubscriptionId String?
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean @default(false)
  trialEnd          DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UsageStats {
  id                   String   @id @default(cuid())
  userId               String
  month                String   // Format: "YYYY-MM"
  recipesGenerated     Int      @default(0)
  mealPlansGenerated   Int      @default(0)
  lastReset            DateTime @default(now())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, month])
}

model Recipe {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  content     Json     // Store complete recipe data as JSON
  tags        String[] // Array of tags
  situation   String?  // Cooking situation
  notes       String?  // User's personal notes
  feedback    String?  // User feedback: 'thumbs_up', 'thumbs_down', null
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MealPlan {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  content     Json     // Store complete meal plan data as JSON
  focus       String?  // Planning focus (budget, time-saving, etc.)
  numMeals    Int?     // Number of meals planned
  totalCost   String?  // Estimated total cost
  notes       String?  // User's personal notes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserPreferences {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  cookingSkill            String   @default("Intermediate (some techniques)")
  dietaryRestrictions     String[] @default(["None"])
  cuisinePreferences      String[] @default(["No Preference"])
  useSeasonalIngredients  Boolean  @default(false)
  cookingStyle            String?  // Cooking philosophy/style preference
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}